// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"strconv"
)

type UintOpt interface {
	modifyUintParser(p *uintParser) error
}

// Uint extracts and parses the variable provided according to the options provided.
// Available options:
// - base
// - bit_size
// - default
func (c *Cfg) Uint(docOpts string, opts ...UintOpt) uint64 {
	s, err := newUintSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
	}
	c.addDescription(s.describe())
	v, _ := c.evaluate(s).(uint64)
	return v
}

var Uint = struct {
	Default func(uint64) UintOpt
	Base    func(int) UintOpt
	BitSize func(int) UintOpt
}{
	Default: func(def uint64) UintOpt {
		return defaultOpt(def)
	},
	Base: func(base int) UintOpt {
		return uintOptFunc(func(p *uintParser) error {
			p.setBase(base)
			return nil
		})
	},
	BitSize: func(bitSize int) UintOpt {
		return uintOptFunc(func(p *uintParser) error {
			p.setBitSize(bitSize)
			return nil
		})
	},
}

type uintOptFunc func(p *uintParser) error

func (f uintOptFunc) modifyUintParser(p *uintParser) error {
	return f(p)
}

var _ UintOpt = new(uintOptFunc)

func newUintSpec(docOpts string, opts []UintOpt) (*spec, error) {
	parsed, err := parseDocOpts(docOpts)
	if err != nil {
		return nil, err
	}

	os := make([]UintOpt, 0, len(opts)+len(parsed))
	for _, p := range parsed {
		os = append(os, p)
	}

	p := new(uintParser)
	s := &spec{
		parser:   p,
		typeName: "uint64",
	}

	for _, opt := range append(os, opts...) {
		if opt, ok := opt.(interface{ modify(*spec) error }); ok {
			if err = opt.modify(s); err != nil {
				return nil, err
			}
			continue
		}
		if err := opt.modifyUintParser(p); err != nil {
			return nil, err
		}
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type uintParser struct {
	baser
	bitSizer
}

func (p *uintParser) parse(s string) (interface{}, error) {
	return strconv.ParseUint(
		s,
		p.base,
		p.bitSize,
	)
}

func (p *uintParser) describe() interface{} {
	return uintParserDescription{
		Base:    p.base,
		BitSize: p.bitSize,
	}
}

type uintParserDescription struct {
	Base    int `json:"base,omitempty"`
	BitSize int `json:"bit_size,omitempty"`
}
