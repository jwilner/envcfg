// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"strconv"
)

type BoolOpt interface {
	modifyBoolParser(p *boolParser) error
}

// Bool extracts and parses the variable provided according to the options provided.
// Available options:
// - default
func (c *Cfg) Bool(docOpts string, opts ...BoolOpt) bool {
	s, err := newBoolSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
	}
	c.addDescription(s.describe())
	v, _ := c.evaluate(s).(bool)
	return v
}

var Bool = struct {
	Default func(bool) BoolOpt
}{
	Default: func(def bool) BoolOpt {
		return defaultOpt(def)
	},
}

type boolOptFunc func(p *boolParser) error

func (f boolOptFunc) modifyBoolParser(p *boolParser) error {
	return f(p)
}

var _ BoolOpt = new(boolOptFunc)

func newBoolSpec(docOpts string, opts []BoolOpt) (*spec, error) {
	parsed, err := parseDocOpts(docOpts)
	if err != nil {
		return nil, err
	}

	os := make([]BoolOpt, 0, len(opts)+len(parsed))
	for _, p := range parsed {
		os = append(os, p)
	}

	p := new(boolParser)
	s := &spec{
		parser:   p,
		typeName: "bool",
	}

	for _, opt := range append(os, opts...) {
		if opt, ok := opt.(interface{ modify(*spec) error }); ok {
			if err = opt.modify(s); err != nil {
				return nil, err
			}
			continue
		}
		if err := opt.modifyBoolParser(p); err != nil {
			return nil, err
		}
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type boolParser struct {
}

func (p *boolParser) parse(s string) (interface{}, error) {
	return strconv.ParseBool(
		s,
	)
}

func (p *boolParser) describe() interface{} {
	return struct{}{}
}
