// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"strconv"
)

type FloatOpt interface {
	modifyFloatParser(p *floatParser) error
}

// Float extracts and parses the variable provided according to the options provided.
// Available options:
// - bit_size
// - default
func (c *Cfg) Float(docOpts string, opts ...FloatOpt) float64 {
	s, err := newFloatSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
	}
	c.addDescription(s.describe())
	v, _ := c.evaluate(s).(float64)
	return v
}

var Float = struct {
	Default func(float64) FloatOpt
	BitSize func(int) FloatOpt
}{
	Default: func(def float64) FloatOpt {
		return defaultOpt(def)
	},
	BitSize: func(bitSize int) FloatOpt {
		return floatOptFunc(func(p *floatParser) error {
			p.setBitSize(bitSize)
			return nil
		})
	},
}

type floatOptFunc func(p *floatParser) error

func (f floatOptFunc) modifyFloatParser(p *floatParser) error {
	return f(p)
}

var _ FloatOpt = new(floatOptFunc)

func newFloatSpec(docOpts string, opts []FloatOpt) (*spec, error) {
	parsed, err := parseDocOpts(docOpts)
	if err != nil {
		return nil, err
	}

	os := make([]FloatOpt, 0, len(opts)+len(parsed))
	for _, p := range parsed {
		os = append(os, p)
	}

	p := new(floatParser)
	s := &spec{
		parser:   p,
		typeName: "float64",
	}

	for _, opt := range append(os, opts...) {
		if opt, ok := opt.(interface{ modify(*spec) error }); ok {
			if err = opt.modify(s); err != nil {
				return nil, err
			}
			continue
		}
		if err := opt.modifyFloatParser(p); err != nil {
			return nil, err
		}
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type floatParser struct {
	bitSizer
}

func (p *floatParser) parse(s string) (interface{}, error) {
	return strconv.ParseFloat(
		s,
		p.bitSize,
	)
}

func (p *floatParser) describe() interface{} {
	return floatParserDescription{
		BitSize: p.bitSize,
	}
}

type floatParserDescription struct {
	BitSize int `json:"bit_size,omitempty"`
}
