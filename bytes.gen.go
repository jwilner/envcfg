package envcfg

// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.

import (
	"encoding/json"
	"errors"
	"strconv"
	"strings"
)

// Bytes extracts and parses a []byte variable using the options provided.
//
// The first argument must be a string with beginning with the variable name as expected in the process environment.
// Any other options -- none of which are required -- may either be specified in the remainder of the string or using
// the type-safe BytesOpts.
//
// Available options:
// 		- "default" or BytesDefault
// 		- "no_padding" or BytesNoPadding
// 		- "optional" or Optional
// 		- "padding" or BytesPadding
// 		- "url_safe" or BytesURLSafe
func (c *Cfg) Bytes(docOpts string, opts ...BytesOpt) (v []byte) {
	s, err := newBytesSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
		return
	}
	c.addDescription(s.describe())
	v, _ = c.evaluate(s).([]byte)
	return
}

// BytesOpt modifies Bytes variable configuration.
type BytesOpt interface {
	modify(s *spec)
	modifyBytesParser(p *bytesParser)
}

// BytesDefault specifies a default value for a Bytes variable.
func BytesDefault(def []byte) BytesOpt {
	return defaultOpt(def)
}

// BytesNoPadding disables padding for a Bytes variable.
func BytesNoPadding(noPadding bool) BytesOpt {
	return bytesOptFunc(func(p *bytesParser) {
		p.noPadding = noPadding
	})
}

// BytesPadding specifies an alternate padding for a Bytes variable.
func BytesPadding(padding rune) BytesOpt {
	return bytesOptFunc(func(p *bytesParser) {
		p.padding = padding
	})
}

// BytesURLSafe specifies the URL safe form of base64 encoding for a Bytes variable.
func BytesURLSafe(urlSafe bool) BytesOpt {
	return bytesOptFunc(func(p *bytesParser) {
		p.urlSafe = urlSafe
	})
}

type bytesOptFunc func(p *bytesParser)

func (f bytesOptFunc) modifyBytesParser(p *bytesParser) {
	f(p)
}

func (bytesOptFunc) modify(*spec) {}

var _ BytesOpt = new(bytesOptFunc)

func newBytesSpec(docOpts string, opts []BytesOpt) (*spec, error) {
	parsed, err := parse(docOpts)
	if err != nil {
		return nil, err
	}

	p := new(bytesParser)
	s := &spec{
		parser:   p,
		typeName: "[]byte",
		name:     parsed.name,
		comment:  parsed.description,
	}

	for _, f := range parsed.fields {
		var (
			opt BytesOpt
			err error
		)
		switch strings.ToLower(f[0]) {
		case "default":
			val := f[1]
			opt = uniOptFunc(func(s *spec) {
				s.flags |= flagDefaultValString | flagDefaultVal
				s.defaultValS = val
			})
		case "no_padding":
			var val bool
			val, err = strconv.ParseBool(f[1])
			opt = BytesNoPadding(val)
		case "optional":
			if f[1] != "" {
				err = errors.New("optional does not take any arguments")
			}
			opt = Optional
		case "padding":
			value := []rune(f[1])
			if len(value) != 1 {
				err = errors.New("must be only one rune")
				break
			}
			opt = BytesPadding(value[0])
		case "url_safe":
			var val bool
			val, err = strconv.ParseBool(f[1])
			opt = BytesURLSafe(val)
		}
		if err != nil {
			return nil, err
		}
		if opt == nil {
			return nil, errors.New("unknown")
		}
		opt.modify(s)
		opt.modifyBytesParser(p)
	}

	for _, opt := range opts {
		opt.modify(s)
		opt.modifyBytesParser(p)
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type bytesParser struct {
	noPadding bool
	padding   rune
	urlSafe   bool
}

func (p *bytesParser) parse(s string) (interface{}, error) {
	return parseBytes(
		s,
		p.padding,
		p.noPadding,
		p.urlSafe,
	)
}

func (p *bytesParser) describe() interface{} {
	return bytesParserDescription{
		NoPadding: p.noPadding,
		Padding:   p.padding,
		URLSafe:   p.urlSafe,
	}
}

type bytesParserDescription struct {
	NoPadding bool `json:"no_padding,omitempty"`
	Padding   rune `json:"padding,omitempty"`
	URLSafe   bool `json:"url_safe,omitempty"`
}

func (d bytesParserDescription) MarshalJSON() ([]byte, error) {
	var padding string
	if d.Padding != 0 {
		padding = string(d.Padding)
	}
	return json.Marshal(struct {
		NoPadding bool   `json:"no_padding,omitempty"`
		Padding   string `json:"padding,omitempty"`
		URLSafe   bool   `json:"url_safe,omitempty"`
	}{
		NoPadding: d.NoPadding,
		Padding:   padding,
		URLSafe:   d.URLSafe,
	})
}
