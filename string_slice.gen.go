// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"encoding/json"
)

type StringSliceOpt interface {
	modifyStringSliceParser(p *stringSliceParser) error
}

// StringSlice extracts and parses the variable provided according to the options provided.
// Available options:
// - comma
// - default
func (c *Cfg) StringSlice(docOpts string, opts ...StringSliceOpt) []string {
	s, err := newStringSliceSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
	}
	c.addDescription(s.describe())
	v, _ := c.evaluate(s).([]string)
	return v
}

var StringSlice = struct {
	Default func([]string) StringSliceOpt
	Comma   func(rune) StringSliceOpt
}{
	Default: func(def []string) StringSliceOpt {
		return defaultOpt(def)
	},
	Comma: func(comma rune) StringSliceOpt {
		return stringSliceOptFunc(func(p *stringSliceParser) error {
			p.setComma(comma)
			return nil
		})
	},
}

type stringSliceOptFunc func(p *stringSliceParser) error

func (f stringSliceOptFunc) modifyStringSliceParser(p *stringSliceParser) error {
	return f(p)
}

var _ StringSliceOpt = new(stringSliceOptFunc)

func newStringSliceSpec(docOpts string, opts []StringSliceOpt) (*spec, error) {
	parsed, err := parseDocOpts(docOpts)
	if err != nil {
		return nil, err
	}

	os := make([]StringSliceOpt, 0, len(opts)+len(parsed))
	for _, p := range parsed {
		os = append(os, p)
	}

	p := new(stringSliceParser)
	s := &spec{
		parser:   p,
		typeName: "[]string",
	}

	for _, opt := range append(os, opts...) {
		if opt, ok := opt.(interface{ modify(*spec) error }); ok {
			if err = opt.modify(s); err != nil {
				return nil, err
			}
			continue
		}
		if err := opt.modifyStringSliceParser(p); err != nil {
			return nil, err
		}
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type stringSliceParser struct {
	slicer
}

func (p *stringSliceParser) parse(s string) (interface{}, error) {
	return p.parseSlice(s)

}

func (p *stringSliceParser) describe() interface{} {
	return stringSliceParserDescription{
		Comma: p.comma,
	}
}

type stringSliceParserDescription struct {
	Comma rune `json:"comma,omitempty"`
}

func (d stringSliceParserDescription) MarshalJSON() ([]byte, error) {
	var comma string
	if d.Comma != 0 {
		comma = string(d.Comma)
	}
	return json.Marshal(struct {
		Comma string `json:"comma,omitempty"`
	}{
		Comma: comma,
	})
}
