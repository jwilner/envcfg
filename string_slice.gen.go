// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"encoding/json"
	"errors"
	"strings"
)

// StringSlice extracts and parses the variable provided according to the options provided.
// Available options:
// - "comma" or StringSlice.Comma
// - "default" or StringSlice.Default
// - "optional" or Optional
func (c *Cfg) StringSlice(docOpts string, opts ...StringSliceOpt) (v []string) {
	s, err := newStringSliceSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
		return
	}
	c.addDescription(s.describe())
	v, _ = c.evaluate(s).([]string)
	return
}

// StringSliceOpt modifies StringSlice variable configuration.
type StringSliceOpt interface {
	modify(s *spec)
	modifyStringSliceParser(p *stringSliceParser)
}

var StringSlice = struct {
	Comma   func(rune) StringSliceOpt
	Default func([]string) StringSliceOpt
}{
	Comma: func(comma rune) StringSliceOpt {
		return stringSliceOptFunc(func(p *stringSliceParser) {
			p.comma = comma
		})
	},
	Default: func(def []string) StringSliceOpt {
		return defaultOpt(def)
	},
}

type stringSliceOptFunc func(p *stringSliceParser)

func (f stringSliceOptFunc) modifyStringSliceParser(p *stringSliceParser) {
	f(p)
}

func (stringSliceOptFunc) modify(*spec) {}

var _ StringSliceOpt = new(stringSliceOptFunc)

func newStringSliceSpec(docOpts string, opts []StringSliceOpt) (*spec, error) {
	parsed, err := parse(docOpts)
	if err != nil {
		return nil, err
	}

	p := new(stringSliceParser)
	s := &spec{
		parser:   p,
		typeName: "[]string",
		name:     parsed.name,
		comment:  parsed.description,
	}

	for _, f := range parsed.fields {
		var (
			opt StringSliceOpt
			err error
		)
		switch strings.ToLower(f[0]) {
		case "comma":
			value := []rune(f[1])
			if len(value) != 1 {
				err = errors.New("must be only one rune")
				break
			}
			opt = StringSlice.Comma(value[0])
		case "default":
			val := f[1]
			opt = uniOptFunc(func(s *spec) {
				s.flags |= flagDefaultValString | flagDefaultVal
				s.defaultValS = val
			})
		case "optional":
			if f[1] != "" {
				err = errors.New("optional does not take any arguments")
			}
			opt = Optional
		}
		if err != nil {
			return nil, err
		}
		if opt == nil {
			return nil, errors.New("unknown")
		}
		opt.modify(s)
		opt.modifyStringSliceParser(p)
	}

	for _, opt := range opts {
		opt.modify(s)
		opt.modifyStringSliceParser(p)
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type stringSliceParser struct {
	comma rune
}

func (p *stringSliceParser) parse(s string) (interface{}, error) {
	return parseSlice(s, p.comma)

}

func (p *stringSliceParser) describe() interface{} {
	return stringSliceParserDescription{
		Comma: p.comma,
	}
}

type stringSliceParserDescription struct {
	Comma rune `json:"comma,omitempty"`
}

func (d stringSliceParserDescription) MarshalJSON() ([]byte, error) {
	var comma string
	if d.Comma != 0 {
		comma = string(d.Comma)
	}
	return json.Marshal(struct {
		Comma string `json:"comma,omitempty"`
	}{
		Comma: comma,
	})
}
