// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"strconv"
)

type IntOpt interface {
	modifyIntParser(p *intParser) error
}

// Int extracts and parses the variable provided according to the options provided.
// Available options:
// - base
// - bit_size
// - default
func (c *Cfg) Int(docOpts string, opts ...IntOpt) int64 {
	s, err := newIntSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
	}
	c.addDescription(s.describe())
	v, _ := c.evaluate(s).(int64)
	return v
}

var Int = struct {
	Default func(int64) IntOpt
	Base    func(int) IntOpt
	BitSize func(int) IntOpt
}{
	Default: func(def int64) IntOpt {
		return defaultOpt(def)
	},
	Base: func(base int) IntOpt {
		return intOptFunc(func(p *intParser) error {
			p.setBase(base)
			return nil
		})
	},
	BitSize: func(bitSize int) IntOpt {
		return intOptFunc(func(p *intParser) error {
			p.setBitSize(bitSize)
			return nil
		})
	},
}

type intOptFunc func(p *intParser) error

func (f intOptFunc) modifyIntParser(p *intParser) error {
	return f(p)
}

var _ IntOpt = new(intOptFunc)

func newIntSpec(docOpts string, opts []IntOpt) (*spec, error) {
	parsed, err := parseDocOpts(docOpts)
	if err != nil {
		return nil, err
	}

	os := make([]IntOpt, 0, len(opts)+len(parsed))
	for _, p := range parsed {
		os = append(os, p)
	}

	p := new(intParser)
	s := &spec{
		parser:   p,
		typeName: "int64",
	}

	for _, opt := range append(os, opts...) {
		if opt, ok := opt.(interface{ modify(*spec) error }); ok {
			if err = opt.modify(s); err != nil {
				return nil, err
			}
			continue
		}
		if err := opt.modifyIntParser(p); err != nil {
			return nil, err
		}
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type intParser struct {
	baser
	bitSizer
}

func (p *intParser) parse(s string) (interface{}, error) {
	return strconv.ParseInt(
		s,
		p.base,
		p.bitSize,
	)
}

func (p *intParser) describe() interface{} {
	return intParserDescription{
		Base:    p.base,
		BitSize: p.bitSize,
	}
}

type intParserDescription struct {
	Base    int `json:"base,omitempty"`
	BitSize int `json:"bit_size,omitempty"`
}
