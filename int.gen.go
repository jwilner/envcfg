package envcfg

// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.

import (
	"errors"
	"strconv"
	"strings"
)

// Int extracts and parses a int64 variable using the options provided.
//
// The first argument must be a string with beginning with the variable name as expected in the process environment.
// Any other options -- none of which are required -- may either be specified in the remainder of the string or using
// the type-safe IntOpts.
//
// Available options:
// 		- "base" or IntBase
// 		- "bit_size" or IntBitSize
// 		- "default" or IntDefault
// 		- "optional" or Optional
func (c *Cfg) Int(docOpts string, opts ...IntOpt) (v int64) {
	s, err := newIntSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
		return
	}
	c.addDescription(s.describe())
	v, _ = c.evaluate(s).(int64)
	return
}

// IntOpt modifies Int variable configuration.
type IntOpt interface {
	modify(s *spec)
	modifyIntParser(p *intParser)
}

// IntBase specifies the base to use for a Int variable.
func IntBase(base int) IntOpt {
	return intOptFunc(func(p *intParser) {
		p.base = base
	})
}

// IntBitSize specifies the bit size to use for a Int variable.
func IntBitSize(bitSize int) IntOpt {
	return intOptFunc(func(p *intParser) {
		p.bitSize = bitSize
	})
}

// IntDefault specifies a default value for a Int variable.
func IntDefault(def int64) IntOpt {
	return defaultOpt(def)
}

type intOptFunc func(p *intParser)

func (f intOptFunc) modifyIntParser(p *intParser) {
	f(p)
}

func (intOptFunc) modify(*spec) {}

var _ IntOpt = new(intOptFunc)

func newIntSpec(docOpts string, opts []IntOpt) (*spec, error) {
	parsed, err := parse(docOpts)
	if err != nil {
		return nil, err
	}

	p := new(intParser)
	s := &spec{
		parser:   p,
		typeName: "int64",
		name:     parsed.name,
		comment:  parsed.description,
	}

	for _, f := range parsed.fields {
		var (
			opt IntOpt
			err error
		)
		switch strings.ToLower(f[0]) {
		case "base":
			var val int
			val, err = strconv.Atoi(f[1])
			opt = IntBase(val)
		case "bit_size":
			var val int
			val, err = strconv.Atoi(f[1])
			opt = IntBitSize(val)
		case "default":
			val := f[1]
			opt = uniOptFunc(func(s *spec) {
				s.flags |= flagDefaultValString | flagDefaultVal
				s.defaultValS = val
			})
		case "optional":
			if f[1] != "" {
				err = errors.New("optional does not take any arguments")
			}
			opt = Optional
		}
		if err != nil {
			return nil, err
		}
		if opt == nil {
			return nil, errors.New("unknown")
		}
		opt.modify(s)
		opt.modifyIntParser(p)
	}

	for _, opt := range opts {
		opt.modify(s)
		opt.modifyIntParser(p)
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type intParser struct {
	base    int
	bitSize int
}

func (p *intParser) parse(s string) (interface{}, error) {
	return strconv.ParseInt(
		s,
		p.base,
		p.bitSize,
	)
}

func (p *intParser) describe() interface{} {
	return intParserDescription{
		Base:    p.base,
		BitSize: p.bitSize,
	}
}

type intParserDescription struct {
	Base    int `json:"base,omitempty"`
	BitSize int `json:"bit_size,omitempty"`
}
