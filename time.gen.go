// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"time"
)

type TimeOpt interface {
	modifyTimeParser(p *timeParser) error
}

// Time extracts and parses the variable provided according to the options provided.
// Available options:
// - default
// - layout
func (c *Cfg) Time(docOpts string, opts ...TimeOpt) time.Time {
	s, err := newTimeSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
	}
	c.addDescription(s.describe())
	v, _ := c.evaluate(s).(time.Time)
	return v
}

var Time = struct {
	Default func(time.Time) TimeOpt
	Layout  func(string) TimeOpt
}{
	Default: func(def time.Time) TimeOpt {
		return defaultOpt(def)
	},
	Layout: func(layout string) TimeOpt {
		return timeOptFunc(func(p *timeParser) error {
			p.setLayout(layout)
			return nil
		})
	},
}

type timeOptFunc func(p *timeParser) error

func (f timeOptFunc) modifyTimeParser(p *timeParser) error {
	return f(p)
}

var _ TimeOpt = new(timeOptFunc)

func newTimeSpec(docOpts string, opts []TimeOpt) (*spec, error) {
	parsed, err := parseDocOpts(docOpts)
	if err != nil {
		return nil, err
	}

	os := make([]TimeOpt, 0, len(opts)+len(parsed))
	for _, p := range parsed {
		os = append(os, p)
	}

	p := new(timeParser)
	s := &spec{
		parser:   p,
		typeName: "time.Time",
	}

	for _, opt := range append(os, opts...) {
		if opt, ok := opt.(interface{ modify(*spec) error }); ok {
			if err = opt.modify(s); err != nil {
				return nil, err
			}
			continue
		}
		if err := opt.modifyTimeParser(p); err != nil {
			return nil, err
		}
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type timeParser struct {
	layouter
}

func (p *timeParser) parse(s string) (interface{}, error) {
	layout := p.layout
	if layout == "" {
		layout = time.RFC3339
	}
	return time.Parse(
		layout,
		s,
	)
}

func (p *timeParser) describe() interface{} {
	return timeParserDescription{
		Layout: p.layout,
	}
}

type timeParserDescription struct {
	Layout string `json:"layout,omitempty"`
}
