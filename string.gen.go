// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

type StringOpt interface {
	modifyStringParser(p *stringParser) error
}

// String extracts and parses the variable provided according to the options provided.
// Available options:
// - default
func (c *Cfg) String(docOpts string, opts ...StringOpt) string {
	s, err := newStringSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
	}
	c.addDescription(s.describe())
	v, _ := c.evaluate(s).(string)
	return v
}

var String = struct {
	Default func(string) StringOpt
}{
	Default: func(def string) StringOpt {
		return defaultOpt(def)
	},
}

type stringOptFunc func(p *stringParser) error

func (f stringOptFunc) modifyStringParser(p *stringParser) error {
	return f(p)
}

var _ StringOpt = new(stringOptFunc)

func newStringSpec(docOpts string, opts []StringOpt) (*spec, error) {
	parsed, err := parseDocOpts(docOpts)
	if err != nil {
		return nil, err
	}

	os := make([]StringOpt, 0, len(opts)+len(parsed))
	for _, p := range parsed {
		os = append(os, p)
	}

	p := new(stringParser)
	s := &spec{
		parser:   p,
		typeName: "string",
	}

	for _, opt := range append(os, opts...) {
		if opt, ok := opt.(interface{ modify(*spec) error }); ok {
			if err = opt.modify(s); err != nil {
				return nil, err
			}
			continue
		}
		if err := opt.modifyStringParser(p); err != nil {
			return nil, err
		}
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type stringParser struct {
}

func (p *stringParser) parse(s string) (interface{}, error) {
	return s, nil
}

func (p *stringParser) describe() interface{} {
	return struct{}{}
}
