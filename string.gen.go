// Code generated by internal/cmd/gen/gen.go DO NOT EDIT.
package envcfg

import (
	"errors"
	"strings"
)

// String extracts and parses the variable provided according to the options provided.
// Available options:
// - default
// - optional
func (c *Cfg) String(docOpts string, opts ...StringOpt) (v string) {
	s, err := newStringSpec(docOpts, opts)
	if err != nil {
		if c.panic {
			panic(err)
		}
		c.addError(err)
		return
	}
	c.addDescription(s.describe())
	v, _ = c.evaluate(s).(string)
	return
}

// StringOpt modifies String variable configuration.
type StringOpt interface {
	modify(s *spec)
	modifyStringParser(p *stringParser)
}

var String = struct {
	Default func(string) StringOpt
}{
	Default: func(def string) StringOpt {
		return defaultOpt(def)
	},
}

type stringOptFunc func(p *stringParser)

func (f stringOptFunc) modifyStringParser(p *stringParser) {
	f(p)
}

func (stringOptFunc) modify(*spec) {}

var _ StringOpt = new(stringOptFunc)

func newStringSpec(docOpts string, opts []StringOpt) (*spec, error) {
	parsed, err := parse(docOpts)
	if err != nil {
		return nil, err
	}

	p := new(stringParser)
	s := &spec{
		parser:   p,
		typeName: "string",
		name:     parsed.name,
		comment:  parsed.description,
	}

	for _, f := range parsed.fields {
		var (
			opt StringOpt
			err error
		)
		switch strings.ToLower(f[0]) {
		case "default":
			val := f[1]
			opt = uniOptFunc(func(s *spec) {
				s.flags |= flagDefaultValString | flagDefaultVal
				s.defaultValS = val
			})
		case "optional":
			if f[1] != "" {
				err = errors.New("optional does not take any arguments")
			}
			opt = Optional
		}
		if err != nil {
			return nil, err
		}
		if opt == nil {
			return nil, errors.New("unknown")
		}
		opt.modify(s)
		opt.modifyStringParser(p)
	}

	for _, opt := range opts {
		opt.modify(s)
		opt.modifyStringParser(p)
	}

	if s.flags&flagDefaultValString > 0 {
		if s.defaultVal, err = p.parse(s.defaultValS); err != nil {
			return nil, err
		}
	}

	return s, nil
}

type stringParser struct {
}

func (p *stringParser) parse(s string) (interface{}, error) {
	return s, nil
}

func (p *stringParser) describe() interface{} {
	return struct{}{}
}
